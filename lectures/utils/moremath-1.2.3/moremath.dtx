% \iffalse    META-COMMENT START
% File: moremath.dtx
% Copyright (C) 1998-2001,2004 David Ne{\accent 20 c}as (Yeti)
% <yeti@physics.muni.cz>.
%
% This package is free software; it can be copied and/or modified under the
% terms of GNU Library General Public License as published by the Free
% Software Foundation; either version 2 of the License or (at your option)
% any later version.
%
% This package is distributed in the hope that it will be useful, but
% WITHOUT ANY WARRANTY. See COPYING for details.
%
% END META_COMMENT    \fi
%% \CharacterTable
%%  {Upper-case    \A\B\C\D\E\F\G\H\I\J\K\L\M\N\O\P\Q\R\S\T\U\V\W\X\Y\Z
%%   Lower-case    \a\b\c\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t\u\v\w\x\y\z
%%   Digits        \0\1\2\3\4\5\6\7\8\9
%%   Exclamation   \!     Double quote  \"     Hash (number) \#
%%   Dollar        \$     Percent       \%     Ampersand     \&
%%   Acute accent  \'     Left paren    \(     Right paren   \)
%%   Asterisk      \*     Plus          \+     Comma         \,
%%   Minus         \-     Point         \.     Solidus       \/
%%   Colon         \:     Semicolon     \;     Less than     \<
%%   Equals        \=     Greater than  \>     Question mark \?
%%   Commercial at \@     Left bracket  \[     Backslash     \\
%%   Right bracket \]     Circumflex    \^     Underscore    \_
%%   Grave accent  \`     Left brace    \{     Vertical bar  \|
%%   Right brace   \}     Tilde         \~}
%%
% \iffalse    META-COMMENT START
%<package&latex>\NeedsTeXFormat{LaTeX2e}[1996/12/01]
%<package&latex>\ProvidesPackage
%<*package>
%<*latex>
%<mathabbr>  {mathabbr}[2006/01/18 vN.A. Some math abbreviations (Yeti)]
%<valform>  {valform}[2001/05/24 v1.2.1 Value formating macro `f (Yeti)]
%<newvec>  {newvec}[1999/05/30 v1.1.0 Font-change style vectors (Yeti)]
%<bracketsym>  {bracketsym}[1999/05/07 v1.2.0 Dirac bra and ket notation (Yeti)]
%<binbreak>  {binbreak}[2004/03/19 v1.3.0 Binops, binrels linebreaking (Yeti)]
%<moremath>  {moremath}[2000/05/19 v1.2.0 Store of math macros (Yeti)]
%</latex>
%<*plain>
%<mathabbr>\message{MathAbbr: 2006/01/18 vN.A. Some math abbreviations (Yeti)}%
%<valform>\message{ValForm: 2000/05/24 v1.2.1 Value formating macro `f (Yeti)}%
%<binbreak>\message{BinBreak: 2004/03/19 v1.3.0 Binops, binrels linebreaking (Yeti)}%
%</plain>
%</package>
%<*driver>
\documentclass{ltxdoc}
\usepackage{makeidx}
\usepackage{amssymb}
\usepackage{mathabbr}
\usepackage[sfboldvec,itboldvec,rmboldvec,yetivec]{newvec}
\usepackage[englishf,medsp]{valform}
\usepackage[latexonly]{bracketsym}
% The moremath.dtx version increases whenever any change to any package
% is made. The rule is:
% letter change means minor changes in packages or only documentation changes;
% subsubversion number change means major changes;
% subversion number change means global changes in bundle or a new package;
% up today version numbers have changed only from 0 to 1
\ProvidesFile{moremath.dtx}[2006/01/18 v1.2.3 MoreMath bundle]
\GetFileInfo{moremath.dtx}
\EnableCrossrefs
%\DisableCrossrefs
\OnlyDescription
\RecordChanges
\PageIndex
\makeindex
% some definitions
\font\mflogo logo10
\def\MF{{\mflogo METAFONT}}
\def\AmS{\leavevmode\hbox{$\mathcal A\kern-.2em\lower.376ex%
        \hbox{$\mathcal M$}\kern-.2em\mathcal S$}}
\def\bb{{\normalfont\textsf{binbreak}}}
\def\bk{{\normalfont\textsf{bracketsym}}}
\def\es{{\normalfont\textsf{exscale}}}
\def\ma{{\normalfont\textsf{mathabbr}}}
\def\mm{{\normalfont\textsf{moremath}}}
\def\nv{{\normalfont\textsf{newvec}}}
\def\vf{{\normalfont\textsf{valform}}}
\def\at{{\normalfont\texttt @}}
\let\vec\slsfbxvec
\DontCheckModules
\begin{document}
\title{The \mm{} bundle, packages \bb, \bk, \ma, \nv, \vf{} and font
  \texttt{cmvec10}\thanks
  {This file has version number \fileversion, last revised \filedate.}}
\author{David Ne\v{c}as (Yeti)\\yeti@physics.muni.cz}
\date{\filedate}
\maketitle
\DocInput{moremath.dtx}
\begin{thebibliography}{9}
\bibitem{olsak} Petr Ol{\accent 20 s}{\accent 19 a}k:
  \textsl{\TeX book naruby}.
  Praha \& Brno 1997. ISBN 80-85615-64-9.
\bibitem{knuth} Donald E. Knuth:
  \textsl{The \TeX book}, volume~A of \textsl{Comupters and Typesetting}.
  Addison-Wesley, Reading, MA, USA 1986. ISBN 0-201-13447-0.
\end{thebibliography}
\PrintIndex
\end{document}
%</driver>
% END META-COMMENT    \fi
%
% \CheckSum{1300}
%
% \changes{v1.00}{1998/07/19}{Initial (documented) version}
% \changes{v1.00a}{1999/02/15}{(YETI) Added optional parameter to
%   `partf; commands `EE and `pardf}
% \changes{v1.00b}{1999/03/27}{(YETI) All catcode changing
%   macros use `mathcode 8000 instead of `catcode 13.
%   Meaning of active characters defined every time they're used.}
% \changes{v1.00c}{1999/04/17}{(YETI) Some changes in \bk, can use
%   ymsbm fonts now. All `typeouts changed to
%   `PackageWarnings.}
% \changes{v1.00d}{1999/05/07}{(YETI) Checked `relax after
%   assigning `mathcodes in \nv{} and \bk.}
% \changes{v1.00e}{1999/05/10}{(YETI) Added macro `diff and rebuilt
%   `partf, both are based on `prefixfrac now. `fracs built from
%   `overs.}
% \changes{v1.00f}{1999/05/30}{(YETI) Added option rmboldvec
%   to \nv.}
% \changes{v1.01}{1999/06/23}{(YETI) cmvec font definition
%   moved to separate file. }
% \changes{v1.02a}{1999/09/05}{(YETI) Added package \bb. `Df now uses
%   `operator@font instead of `rm.}
% \changes{v1.1.0}{1999/09/06}{(YETI) Version numbering changed,
%   subversions of all packages rounded up (dates kept). Documentation
%   clean-up.}
% \changes{v1.1.0a}{2000/03/01}{(YETI) `dop redefined using `mathchardef}
% \changes{v1.1.1}{2000/05/15}{(YETI) \bb{} can autodetermine what
%   penalty should be used. Added some functions to \ma.}
% \changes{v1.2.0}{2000/05/19}{(YETI) Plain \TeX{} versions of \ma, \vf{}
%   and \bb{}. Code and documentation clean-ups. \es{} test moved to \ma{}.
%   \bb{} default changed to `nobreak'.}
% \changes{v1.2.0a}{2000/05/24}{(YETI) Removed double definition of
%   `if@bracket. `f uses `ifx for e testing, funny `xdef changed to `edef
%   in `f. Big documentation clean-up.}
% \changes{v1.2.1}{2000/05/25}{(YETI) Fixed \bb: broken penalty saving,
%   broken Plain version and solved \LaTeX{} `nullfont problem.}
% \changes{v1.2.1a}{2001/09/07}{(YETI) Added `oC, `oF and `oR commands. Fixed
%   forgotten `PackageWarning in Plain version of \bb. License clarifications.}
% \changes{v1.2.2}{2004/03/19}{(YETI) Changed `BinBreakChar to work like
%   `BinBreakHbox so that the post-break character is typeset in math mode.
%   May affect output.}
% \changes{v1.2.3}{2006/01/18}{(YETI) Plain version of `ee and `im in \ma were
%   fixed to work like \LaTeX version.}
%
% \DoNotIndex{\,,\!,\@empty,\@ifstar,\@ifdefinable,\@ifnextchar}
% \DoNotIndex{\active}
% \DoNotIndex{\begingroup}
% \DoNotIndex{\Balpha,\Bbeta,\Bgamma,\Bdelta,\Bepsilon,\Bzeta}
% \DoNotIndex{\Btheta,\Biota,\Bkappa,\Blambda,\Bmu,\Bnu,\Bxi,\Bpi,\Brho}
% \DoNotIndex{\Bsigma,\Btau,\Bupsilon,\Bphi,\Bchi,\Bpsi,\Bomega}
% \DoNotIndex{\Bvarepsilon,\Bvartheta,\Bvarpi,\Bvarrho,\Bvarsigma,\Bvarphi}
% \DoNotIndex{\BGamma,\BDelta,\BTheta,\BLambda,\BXi,\BPi,\BSigma}
% \DoNotIndex{\BUpsilon,\BPhi,\BPsi,\BOmega}
% \DoNotIndex{\catcode,\circ,\cdot,\csname,\CurrentOption}
% \DoNotIndex{\DeclareFontShape,\DeclareMathAlphabet,\DeclareMathSymbol}
% \DoNotIndex{\DeclareSymbolFontAlphabet,\DeclareSymbolFont}
% \DoNotIndex{\DeclareOption,\def,\displaystyle,\Delta}
% \DoNotIndex{\edef,\else,\end,\endgroup,\ensuremath,\empty,\ExecuteOptions}
% \DoNotIndex{\eqno}
% \DoNotIndex{\fi,\frac}
% \DoNotIndex{\global}
% \DoNotIndex{\hat,\hbox}
% \DoNotIndex{\if,\ifmmode,\ifnum,\ifx,\immediate,\infty,\int,\intop,\input}
% \DoNotIndex{\label,\langle,\lceil,\ldots,\let,\left,\lfloor}
% \DoNotIndex{\mathop,\mathrm,\mathinner,\mathbin,\mathchoice,\mit,\mskip}
% \DoNotIndex{\mathrel,\mathbf,\mathcode,\mathord,\mathalpha}
% \DoNotIndex{\newcommand,\newif,\newmuskip,\noexpand,\nolimits,\next}
% \DoNotIndex{\over,\Omega}
% \DoNotIndex{\partial,\ProcessOptions,\PassOptionsToPackage,\ProvidesFile}
% \DoNotIndex{\PackageWarning}
% \DoNotIndex{\rangle,\relax,\right,\RequirePackage,\rm,\rightarrow,\Rightarrow}
% \DoNotIndex{\refstepcounter,\rceil,\rfloor}
% \DoNotIndex{\scriptstyle,\strut,\space,\string}
% \DoNotIndex{\textstyle,\times,\typeout,\thinmuskip}
% \DoNotIndex{\xdef}
% \DoNotIndex{\write}
%
% \DeleteShortVerb{\|}
% \MakeShortVerb{\"}
%
% \tableofcontents
%
% \section{Introduction}
% This document describes packages \bb, \bk, \ma, \nv{} and \vf;
% and a~`master package' \mm.
% It also describes Slatned Sans Serif Bold Extended Computer Modern font
% used for typesseting vectors in pacakge \nv.
%
% The reason of making these packages public is to enable \TeX ing of my
% documents to other people, nothing more.
% (Even if I think some of the macros are really clever.)
%
% Please excuse my poor English.
% (And please note I like using \emph{anything} as a verb,
% especially names of \TeX{} commands.)
%
% Syntactic and typographic conventions:
%
% \smallskip
% \vbox{\halign{\hskip\parindent#\quad&#\hfil\cr
%   "foo"\textvisiblespace"\bar^^Z"&to be literally typed (\TeX{} input, file
%     names)\cr
%   \meta{foo}&construction `foo' described in text\cr
%   "{"foo"}"&(as macro parameter) ballanced text\cr
%   [foo]&optional element `foo'\cr
%   "["foo"]"&\LaTeX{} optional parameter `foo', abbreviation for
%      ["["foo"]"]\cr
%   \textsf{foobar}&package name\cr}}
%
% \section{Usage}
% \subsection{General notes}
% This section discusses mostly cooperation with the rest of world. Skip it
% if everything works for you.
%
% \subsubsection{Bundle structure}
% \index{moremath=\protect\mm|usage}\relax
% As mentioned in the introduction the \mm{} bundle consists of several
% independent packages \bb, \bk, \ma, \nv, \vf{} and a `master package'
% \mm{} and some
% more stuff like a new font and its font definition file.
%
% The packages from \mm{} bundle should be "\usepackage"d individually,
% nevertheless the trio \ma, \nv{} and \vf{} can be for compatibility reasons
% loaded by typing "\usepackage{moremath}". Any \mm{} options are simply
% passed to particular packages. Since the \mm{} itself is completely useless
% its usage is strongly depercated and it's provided purely for compatibility
% with existing documents.
%
% Packages \bb{} and \bk{} are newer and completely independent on \mm.
%
% \subsubsection{About \texttt{cmvec10} font}
% \index{cmvec10=\texttt{cmvec10} font|usage}%
% The bundle also contains parameter file \texttt{cmvec10.mf} for Slanted
% Sans Serif Bold Extended Computer Modern font, which is necessary for
% typesetting vectors as $\vec a$, $\vec F$ instead of $\arrowvec a$,
% $\arrowvec F$. It's only used (but not required) by \nv.
%
% \subsubsection{Compatibility and portability}
% \index{NFSS}\index{LaTeX=\LaTeX}\index{Plain TeX=Plain \TeX}%
% The \mm{} bundle is designed for use with \LaTeXe{}; packages \bb, \nv{}
% and \vf{} newly for Plain \TeX{} too (see below).
%
% If you have \LaTeXe{} and the new NFSS you shouldn't encounter
% any compatibility problems except you need \textsf{amssymb} package
% to actually use some features and also to compile this document.
% With old NFSS you probably won't be able to use most of \nv.
% With \LaTeX\,2.09 (or older) you won't be able to use the package at all
% (even if "\NeedsTeXFormat" command would be removed).
% In both cases you can hardly compile this document.
%
% \index{binbreak.tex=\texttt{binbreak.tex}}%
% \index{newvec.tex=\texttt{newvec.tex}}%
% \index{valform.tex=\texttt{valform.tex}}%
% Packages \bb, \nv{} and \vf{} have now Plain \TeX{} versions too. You can
% load them by typing "\input binbreak" ("newvec", "valform", resp.).
% They should have all the functionality of their \LaTeX{} cousins
% that makes sense in Plain.
%
% Please don't mix \LaTeX{} packages (have ".sty" extension) with
% their Plain \TeX{} versions (have ".tex" extension).
%
% I don't think you will need these packages under \AmS\TeX{} nor
% Music[x]\TeX.  \nv{} and \bb{} collide with \AmS\TeX, in the case of \bb{}
% probably solvably (don't use the single-character options and redefine the
% characters using "\BinBreakChar" manually in the document).
%
% Too keeps things consistent, several public supplementary \LaTeX{} or
% \LaTeX-style macros are defined in Plain \TeX{} versions, namely:
% "\ensuremath" (\ma), "\mathrm" (\ma), "\newcommand" (a simple emulation).
% I hope it won't cause you any troubles.
%
% \subsubsection{About \es{} package}
% \index{exscale=\protect\es}%
% \index{mathabbr=\protect\ma}%
% If you want commands like "\bigl" and "\bigr" to work properly in other
% sizes than 10$\,$pt, you have to load \es{} package (a standard \LaTeX{}
% package).
% \ma{} loads this package automatically when size is not
% 10$\,$pt.
%
% Warning: This functionality was provided by \mm{} before 2000/05/17.
% Nevertheless you shouldn't notice any change unless you used \ma{}
% directly (without \mm) \emph{and} base size of you document was different
% from 10pt \emph{and} you used "\bigl", "\bigr", \dots{} comands \emph{and}
% you didn't load \es{} manually. (There's no easy way of unloading a
% package, making an empty "exscale.sty" in document directory should help.)
%
% \subsection{Package \ma---store of simple math macros}
% \index{mathabbr=\protect\ma|usage}\relax
% This package is simply a store of math macros which haven't grown
% complicated enough to form a separated package yet and some
% abbreviations which never will (whole \mm{} was originally such a store).
% For they are simple, they won't be commented much---see Code documentation
% part for some more comments.
% Package is constantly liable to change (i.e. grow).
%
% \DescribeMacro\tg
% \DescribeMacro\arctg
% \DescribeMacro\cotg
% \DescribeMacro\arccotg
% \DescribeMacro\tgh
% \DescribeMacro\cotgh
% \DescribeMacro\sinc
% Commands "\tg", "\arctg", "\cotg", "\arccotg", "\tgh", "\cotgh"
% give symbols of tangens-like functions as are used in Czech typography.
% Example:
% $$ \tg\frac\pi4=1 $$
% (source: "\tg\frac\pi4=1").
%
% \DescribeMacro\sinc
% Command "\sinc" gives symbol of `sinc' function defined
% $$ \sinc x=\left\{
%       \begin{array}{rl}
%         1,&\quad x=0\\
%         \frac{\sin x}x,&\quad\hbox{otherwise}\\
%       \end{array}
%    \right.
% $$
%
% \DescribeMacro\Tr
% Command "\Tr" gives symbol of `trace'.
% Example:
% $$ \Tr A=0\land \det A\ne0\quad\impl\quad\Tr A^{-1}=0. $$
% (source: "\Tr A=0\land \det A\ne0\quad\impl\quad\Tr A^{-1}=0").
%
% \DescribeMacro\CC
% \DescribeMacro\EE
% \DescribeMacro\II
% \DescribeMacro\NN
% \DescribeMacro\QQ
% \DescribeMacro\RR
% \DescribeMacro\ZZ
% Commands "\CC", "\II", "\NN", "\QQ", "\RR", "ZZ" give symbols of basic
% number sets $\CC$, $\II$, $\NN$, $\QQ$, $\RR$ and~$\ZZ$.
% Symbol~$\EE$ ("\EE") is sometimes used as symbol for unit matrix.
% These blackboard bold letters are contained is \texttt{msbm}
% font, so you have to load \textsf{amssymb}\footnote
%   {or \textsf{amssyymb} and \texttt{ymsbm} font---see \bk{} documentation.}
% package to be able to use them.
% The above-mentioned macros are defined regardless of it,
% but if you don't load \textsf{amssymb}, using some of them will
% produce error message about undefined command "\mathbb".
% Example:
% $$ (\forall x\in\RR)\,(\forall d>0)\,(\exists p\in\ZZ,q\in\NN)\,(|x-p/q|<d) $$
% (source: "(\forall x\in\RR)\,(\forall d>0)\,(\exists p\in\ZZ,q\in\NN)"
% "\,(|x-p/q|<d)").
%
% \DescribeMacro\ee
% \DescribeMacro\im
% \DescribeMacro\dd
% \DescribeMacro\Df
% Another set of simple are macros for typesetting letters `e', `i', `d'
% and `D' in Roman type as it should be when they are used as Euler number,
% imaginary unit and symbols for differential of function of
% one/more variables.
% Example:
% $$ \frac\dd{\dd t}\ee^{\im t}=\im\cos t-\sin t $$
% (source "\frac\dd{\dd t}\ee^{\im t}=\im\cos t-\sin t").
%
% \DescribeMacro\fracd
% Macro "\fracd" typesets fraction forcing display style.
% Syntax is the same as of "\frac" (and all following fraction-macros),
% except it has a star-form "\fracd*", that adds strut to both numerator and
% denominators, so the fraction is not squeezed
% \begin{quote}
%   "\fracd"["*"]"{"\meta{numerator}"}{"\meta{denominator}"}"
% \end{quote}
% Example:
% $$ a_0+\fracd*{1}{a_1+\fracd*{1}{a_2+\fracd*1{a_3}}} $$
% (source: "a_0+\fracd*{1}{a_1+\fracd*{1}{a_2+\fracd*1{a_3}}}").
%
% \DescribeMacro\fract
% Macro "\fract" typesets fraction in text style.
% Example:
% $$ \fract12\sin2x+\fract13\sin3x=\cos y $$
% (source: "\fract12\sin2x+\fract13\sin3x=\cos y").
%
% \DescribeMacro\fracnot
% Macro "\fracnot" typesets numerator and denominator one style bigger than
% it would be normally, so the result is they keep current style.
%
% \DescribeMacro\partf
% \DescribeMacro\pardf
% Macro "\partf" adds symbol~$\partial$ before both numerator and
% denominator.
% You can type "\partf2{"\meta{numerator}"}{"\meta{denominator}"}"
% to get second order partial derivation.
% Macro "\pardf" typesets second order partial derivation by different
% variables.
% Example:
% the fraction is not squeezed.
% $$ \partf{}r(r^2F)+r\partf F\varphi=0,\qquad
%     \(\pardf Qxy\)^{\!\!2}<\partf2Qx\partf2Qx $$
% (sources: "\partf{}r(r^2F)+r\partf F\varphi=0",\hfil\break
% "\(\pardf Qxy\)^2<\partf2Qx\partf2Qx").
%
% \DescribeMacro\diff
% Macro "\diff" works exactly as "\partf", but typesets total derivation
% instead partial.
% Example
% $$ \diff2yx+p(x)\diff yx+q(x)y=f(x) $$
% (source: "\diff2yx+p(x)\diff yx+q(x)y=f(x)").
%
% \DescribeMacro\prefixfrac
% As you can guess "\diff" and "\partf" are derived from more general macro
% \begin{quote}
%   "\prefixfrac{"\meta{prefix}"}"["2"]"{"\meta{numerator}"}{"\meta{denominator}"}"
% \end{quote}
% which puts \meta{prefix} before numerator and denominator handling the case
% when numerator is preceeded by~"2".
% We can illustrate it on definition of "\partf"
% \begin{quote}
%   "\newcommand{\partf}{\prefixfrac\partial}".
% \end{quote}
%
% \DescribeMacro\nlist
% \begin{quote}
%   "\nlist["\meta{first-idnex}"]{"\meta{identifier}"}{"\meta{last-index}"}"
% \end{quote}
% This macro typesets list (using ellipsis) of \meta{identifier}, indexes
% begin with \meta{first-index} and end with \meta{last-index}.
% Parameter \meta{first-index} is optional and its implicit value is~1.
% Macro can be used in text mode.
% Example:
% $$ f(\nlist x{k-1},cx_k,\nlist[k+1]xn)=cf(\nlist xn) $$
% (source: "f(\nlist x{k-1},cx_k,\nlist[k+1]xn)=cf(\nlist xn)")
%
% \DescribeMacro\degree
% Command "\degree" gives \degree{}.
%
% \DescribeMacro\oC
% \DescribeMacro\oF
% \DescribeMacro\oR
% Commands "\oC", "\oF" and "\oR" give $\oC$, $\oF$ and $\oR$.
% Note they are different from
% plain "\degree{\rm C}" ("F", "R"), which would give too big space between
% the circle and the letter ($\degree{\rm C}$, $\degree{\rm F}$, $\degree{\rm R}$).
%
% \DescribeMacro\dop
% Command "\dop" typesets binary operator dot (on baseline) as it's used as
% multiplication symbol in Czech typography. Example: $1001=7\dop11\dop13$
% (source: "$1001=7\dop11\dop13$").
%
% \DescribeMacro\floor
% \DescribeMacro\ceil
% Macros "\floor{"\meta{expression}"}" and "\ceil{"\meta{expression}"}" are
% abbreviations for "\left\lfloor"\meta{expression}"\right\rfloor" and
% "\left\lceil"\meta{expression}"\right\rceil".
% Example:
% $$ \ceil x\ge\floor x $$
% (source: "\ceil x\ge\floor x").
%
% \DescribeMacro\8
% Command "\8" is an abbreviation for infinity "\infty"~($\8$).
%
% \DescribeMacro\W
% \DescribeMacro\w
% Command "\W" is and abbreviation for uppercase Greek letter "\Omega"~($\W$)
% and "\w" the same for lowercase "\omega"~($\w$).
%
% \DescribeMacro\impl
% Command "\impl" is an abbreviation for implication "\Rightarrow" (\impl).
% Can be used in text mode.
%
% \DescribeMacro\inty
% \DescribeMacro\inti
% Commands "\inty" and "\inti" both typeset integrals from $-\8$ to~$\8$;
% "\inty" with limits beside and "\inti" with limits under and over
% integral symbol (not very useful).
% Example:
% $$ f*g\equiv\inty f(t)g(x-t)\,\dd t,\qquad
%    f\circledast g\equiv\inti f(t)g(t-x)\,\dd t $$
% (soruces: "f*g\equiv\inty f(t)g(x-t)\,\dd t"\hfil\break
% and "f\circledast g\equiv\inti f(t)g(t-x)\,\dd t").
%
% \DescribeMacro\(
% \DescribeMacro\)
% Commands "\(" and "\)" work as "\left(" and "\right)" instead of
% "\begin{math}" and "\end{math}" as defined in \LaTeX.
% Nobody is silly enough to use them instead of "$" (I hope).
% \DescribeMacro\[
% \DescribeMacro\]
% The same applies for "\[" and "\]" that work as "\left[" and "\right]"
% instead of "\begin{displaymath}" and "\end{displaymath}" as defined
% in \LaTeX.
% Example of both:
% $$ l\approx\[1+\frac12\(\frac hc\)-\frac83\(\frac hc\)^{\!\!2}\] $$
% (source: "l\approx\[1+\frac12\(\frac hc\)-\frac83\(\frac hc\)^2\]").
%
% \DescribeMacro\eqn
% \begin{quote}
%   "\eqn["\meta{label}"]"
% \end{quote}
% This macro fixes another \LaTeX{} stupidity---one should use "$$" for
% begin/end of displayed math both with and without equation number and the
% (optional) equation number should be typeset by some other command. As you
% can guess, "\eqn" is exactly such a command: "$$"\meta{equation}"\eqn$$"
% is equivalent to
% "\begin{equation}"\allowbreak\meta{equation}\allowbreak"\end{equation}"
% so you can remove/add equation number just by removing/adding "\eqn"
% before the closing "$$".
% Moreover you can specify label as an optional parameter, so you can type
% just "$$"\meta{equation}\allowbreak"\eqn["\meta{label}"]$$" instead of
% "\begin{equation}"\allowbreak\meta{equation}\allowbreak%
% "\label{"\meta{label}"}"\allowbreak"\end{equation}".
%
% \subsection{Package \vf---value formatting macro
%   \texttt{\protect\bslash f}}
% \index{valform=\protect\vf|usage}%
% \DescribeMacro\f\index{f=\verb*+\f+|(usage}%
% When you want to typeset numerical value of some physical quantity,
% e.g.~Planck's constant \f\hbar=1.054e-34 J s|, you have to type something
% like\hfil\break"$\hbar=1.054\times10^{-34}\rm\,J\,s$".
% It would be nice to have macro which saves you constant typing things like
% "\times10^" and "\rm\," and also enable easy changes in notation (e.g~to
% {\let\timesop\cdot\f1.054e-34 J s|}) after you have typed possibly whole
% document.
% And that's the goal of macro "\f".
% Using this macro you don't type anything concerning formatting,
% just take a number with `\texttt{e}' for exponent, i.e. "1.054e-34", add
% list of units separated by spaces, i.e. \verb*: J s:, use it all as
% argument of macro "\f", which will do all work for you, and get desired
% result \f1.054e-34 J s| (this example was actually typeset from source
% "\f1.054e-34 J s|").
%
% Precise syntax definition:
% \begin{quote}
%   "\f"[\meta{number}]["e"\meta{exponent}][\meta{space}\meta{units}]"|",
% \end{quote}
% where `"|"' stands for vertical line (ASCII 124, on keyboard usually on the
% same key as backslash) and \meta{space} for a~space---note spaces are
% gobbled after control sequences, it implies that parameter of "\f" cannot
% consist of \meta{units} only (even though all three parameters are
% optional), since the space preceeding \meta{units} would be gobbled after
% "\f" itself.
% The \meta{number} part of argument is typeset with respect to possible
% Czech format of number i.e. "\f3,14|" gives \f3,14| without space after
% comma (cf. $3,14$ obtained from "$3,14$").
% The \meta{exponent} part is typeset as exponent of
% $10^{\langle\it exponent\rangle}$.
% The \meta{units} part is typeset using roman type, appropriate spaces are
% inserted between units.
% Calling the three parts of argument `number', `exponent' and `units' is
% just a convention, in practice they can contain almost anything, but no
% one can gurantee it will work.
% Note that the parameter is \emph{not} delimited with "{}", only with
% the ending `"|"'.
% Moreover, if you use "\f" in horizontal more, you don't have to (shouldn't)
% enclose it to beginmath/endmath `"$"'.
%
% That was all about saving keystrokes. What about the stated easy
% notation change?
% First, you can choose the operator used between number and
% exponent by specifying one of \vf{} options \texttt{czechf}
% (default), \texttt{englishf} and \texttt{cdotf} in document preamble.
%
% \smallskip\hfil\begin{tabular}{rl}
% with option& "\f c=3.00e8 m s^{-1}|" gives \\\noalign{\smallskip}
% \texttt{czechf}&
%   \def\timesop{\mathbin.}\f c=3.00e8 m s^{-1}| \\
% \texttt{englishf}&
%   \let\timesop\times\f c=3.00e8 m s^{-1}| \\
% \texttt{cdotf}&
%   \let\timesop\cdot\f c=3.00e8 m s^{-1}| \\
% \end{tabular}\smallskip
%
% \DescribeMacro\timesop
% If it doesn't satisfy your needs, you can set the operator to anything you
% want by re"\def"ining (or "\let"ting) command "\timesop". For example
% \texttt{englishf} is equivalent to "\let\timesop\times". This is the only
% way how to change it in Plain \TeX.
%
% Second, you can choose th amount of space inserted between units
% by specifying one of options \texttt{thinsp}, \texttt{medsp} (default),
% or \texttt{thicksp} to \vf{}
% (they correspond to spaces \f3 mu|, \f4 mu|, and \f5 mu|).
%
% \smallskip\hfil\begin{tabular}{rl}
% with option& "\f G=6.672e-11 m^3 s^{-2} kg^{-1}|" gives \\\noalign{\smallskip}
% \texttt{thinsp}&
%   \betweenunitskip3mu\f G=6.672e-11 m^3 s^{-2} kg^{-1}| \\
% \texttt{medsp}&
%   \betweenunitskip4mu\f G=6.672e-11 m^3 s^{-2} kg^{-1}| \\
% \texttt{thicksp}&
%   \betweenunitskip5mu\f G=6.672e-11 m^3 s^{-2} kg^{-1}| \\
% \end{tabular}\smallskip
%
% \DescribeMacro\betweenunitskip
% Again, you can set the space directly by setting "\betweenunitskip" to
% desired value. This is the only way how to set it in Plain \TeX.
%
% \DescribeMacro\betweenunits
% But much finer control is provided.
% You can redefine command "\betweenunits" actually inserted between units
% (normally defined to "\mskip\betweenunitskip") to anything else.
% For example after definition "\def\betweenunits{\mathbin.}" the last example
% becomes {\def\betweenunits{\mathbin.}\f G=6.672e-11 m^3 s^{-2} kg^{-1}|}.
%
% \DescribeMacro\beforeunits
% \DescribeMacro\afterunits
% Finally, if you like some special stuff before and after units
% {\def\beforeunits{\betweenunits[}\def\afterunits{]}\relax
%   (e.g.~\f G=6.672e-11 m^3 s^{-2} kg^{-1}|)}, there are two commands
% "\beforeunits" (normally equal to "\betweenunits") and "\afterunits"
% (normally
% "\relax") inserted before and after units---the example above was typeset
% with "\def\beforeunits{\betweenunits[}" and "\let\afterunits]".
%
% As you can guess, the characters `\texttt{e}' and~`\texttt{|}' can cause
% troubles when you use them inside of argument.
% The easiest solution is to enclose them in group, so \TeX{} won't `see'
% them---e.g. \f{|e|}=1.602e-19 C| was typeset from source
% "\f{|e|}=1.602e-19 C|".
% There are many other things (macros) you cannot use inside of argument
% (or some its part)---for instance some font change commands.
% Moreover, "\f" is `fragile' and have to be "\protect"ed in standard
% cases, in which fragile comands have to be protected.
% Please note, macro is intended for number/units formatting, so the
% fact that it can handle some weird arguments is just good luck.
% \index{f=\verb*+\f+|)usage}
%
% \subsection{Package \nv---vectors, bold Greek letters}
% \index{newvec=\protect\nv|usage}%
% \DescribeMacro\vec
% This package redefines command "\vec" accroding to options passed to
% package
%
% \smallskip\begin{tabular}{ll}
% Option passed to \nv&"\vec x=\vec a_1\times\vec j^*" gives\\
% \texttt{yetivec}&\let\vec\slsfbxvec$\vec x=\vec a_1\times\vec j^*$
%   (default)\\
% \texttt{sfboldvec}&\let\vec\sfbxvec$\vec x=\vec a_1\times\vec j^*$\\
% \texttt{itboldvec}&\let\vec\mibvec$\vec x=\vec a_1\times\vec j^*$\\
% \texttt{rmboldvec}&\let\vec\rmbxvec$\vec x=\vec a_1\times\vec j^*$\\
% \texttt{arrowvec}&\let\vec\arrowvec$\vec x=\vec a_1\times\vec j^*$
% (the only possibility without \nv)
% \end{tabular}
%
% \smallskip
% The last example shows that indicating vectors by changing font of type
% saves you from thinking about typing "\imath" and "\jmath" instead of
% "i" and~"j" when you want them to be vectors.
% It also saves you from thinking about superscripts (which can look pretty
% awful in combination with arrow-vectors) and accented vectors
% (e.g.\ vector-operators), which would normally lead to double-accented
% letters.
%
% On the other hand you can't say "\vec\omega" to get some Slanted Sans
% Serif Bold Extended lowercase Greek omega, simply because such a thing
% doesn't exists (but you can still say "\vec\Omega" to get e.g. Slanted
% Sans Serif Bold Extended uppercase Greek Omega $\vec\Omega$).
%
% To solve this problem and generally to make possible to get both bold
% and unbold lowercase Greek letters to one expression a new math family
% "boldletters"\index{boldletters=\protect\texttt{boldletters}}
% is introduced and commands "\Balpha" to "\Bomega" giving $\Balpha$
% to~$\Bomega$ and "\BGamma" to "\BOmega" giving $\BGamma$ to~$\BOmega$
% are defined. (Please note "\Beta" is bold lowercase Greek letter
% eta~$\Beta$, \emph{not} uppercase Beta, because this letter is
% identical to~$B$.)
%
% So you can typeset
% $$ (\Balpha\times\Bbeta)^2=\alpha^2\beta^2-(\Balpha\Bbeta)^2 $$
% from source "(\Balpha\times\Bbeta)^2=\alpha^2\beta^2-(\Balpha\Bbeta)^2".
% It doesn't look very beautiful, but it's now the best we have.
% I hope someday somebody will design lowercase bold Greek letters (based on
% Computer Modern) more convenient for vector typesetting. Please note "\vec"
% doesn't make lowercase Greek letters bold, you have to use appropriate
% "\Bxxx" commands.
%
% \DescribeMacro\makeatvec
% Macro "\makeatvec" makes character \at{} to act like "\vec", so you can type
% just "(@a\times@b)\times@c=(@a@c)@b-(@b@c)@a" to get\makeatvec
% $$ (@a\times@b)\times@c=(@a@c)@b-(@b@c)@a. $$
% Normal behaviour of \at{} can be restored by command "\makeatat".
% Due to changes to code (1999/03/27) you \emph{cannot} restore the normal
% behavior by \LaTeX{} command "\makeatother" (moreover, the prevoius
% example \emph{wouldn't} work if "@"~was letter, you would have to
% insert space between "\times" and~\at{} or else they would form control
% sequence "\times@c").
% A big advantage: behaviour of \at{} in text is not altered.\makeatat
%
% \medskip\leavevmode\noindent\hfil\vbox{%
% \def\1#1{\hbox to1em{\hss$#1$\hss}\ \tt\string#1\qquad}%
% \halign{&\1#\hfil\cr
%   \multispan4\hfil Table of lowercase Bold Greek Letters\hfil\cr
%   \noalign{\smallskip}
%   \Balpha&\Bbeta&\Bgamma&\Bdelta\cr
%   \Bepsilon&\Bzeta&\Beta&\Btheta\cr
%   \Biota&\Bkappa&\Blambda&\Bmu\cr
%   \Bnu&\Bxi&\Bpi&\Brho\cr
%   \Bsigma&\Btau&\Bupsilon&\Bphi\cr
%   \Bchi&\Bpsi&\Bomega&\Bvarepsilon\cr
%   \Bvartheta&\Bvarpi&\Bvarrho&\Bvarsigma\cr
%   \Bvarphi\cr
%   \noalign{\smallskip}
%   \multispan4\hfil Table of uppercase Bold Greek Letters\hfil\cr
%   \noalign{\smallskip}
%   \BGamma&\BDelta&\BTheta&\BLambda\cr
%   \BXi&\BPi&\BSigma&\BUpsilon\cr
%   \BPhi&\BPsi&\BOmega\cr}}
%
% \smallskip
% \DescribeMacro\slsfbxvec
% \DescribeMacro\sfbxvec
% \DescribeMacro\rmbxvec
% \DescribeMacro\mibvec
% \DescribeMacro\arrowvec
% It is possible to access particular types of vectors by more primitive
% commands "\slsfbxvec", "\sfbxvec", "\rmbxvec", "\mibvec" and "\arrowvec"
% and also "\let\vec" to some of this commands.
% But only "\arrowvec" is always available, others are available only when
% you list corresponding vector-style parameter \nv{} options
% (no options means "yetivec").
% Of course you need appropriate metric files/fonts to typeset/view document.
%
% \subsection{Package \bk---Dirac bra and ket notation}
% \index{bracketsym=\protect\bk|usage}\relax
% Warning: This package is still under construction (nevertheless the
% interface shouldn't change much).
%
% The main purpose of this package is to define macros for typesetting bra
% and ket vectors and operators that look good.
% It also defines macros allowing typing left and right angle brackets as
% "<" and~">".
%
% Package \bk{} has two options---\texttt{ymsbm} and \texttt{latexonly}.
% The first tells \bk{} to use my modification of \AmS\ \texttt{msbm} font,
% called \texttt{ymsbm}, while the second uses only things defined in
% standard \LaTeX.
% The \texttt{ymsbm} font contains a variant of angle brackets designed for
% Dirac bra and ket notation, but it's not commonly available and despite it
% gives better results, you are discouraged from its use. All
% examples in this documentation are typeset with \texttt{latexonly} option.
%
% \DescribeMacro\bra
% \DescribeMacro\ket
% \DescribeMacro\ack
% Basic three symbols---left and right angle brackets ($\langle$
% and~$\rangle$) and vertical line~($\vert$)---are available as "\bra",
% "\ket" and "\ack". (The word ``ack'' comes from bra-ack-ket here.)
% Note "\bra", "\ket" and "\ack" are not identical to "\langle", "\rangle"
% and "\vert" because the spacing is different---compare
% $$ \sum_{k,k'}\langle k\vert{\cal A}\vert k'\rangle
%    \vert k'\rangle\langle k\vert $$
% typeset using "\langle", "rangle" and "\vert" with
% $$ \sum_{k,k'}\bra k\ack{\cal A}\ack k'\ket \ack k'\ket\bra k\ack $$
% typeset using "\bra", "\ket" and "\ack".
%
% \DescribeEnv{bracketsym}
% Typing thousands of "\bra"s and "\ket"s still isn't very convenient,
% moreover, \TeX{} source of complex expressions become almost unreadable
% for a human.
% So \bk{} provides environment "bracketsym" in which you can type just "<",
% ">" and~"|" instead of "bra", "\ket" and "\ack".
% \index{<={\tt<}|usage}\index{!>={\tt!>}|usage}\index{!|={\tt!|}|usage}
% Inside of "bracketsym" the previous example then can be typeset from source
% "\sum_{k,k'}<k|{\cal A}|k'>|k'><k|". Wow!
%
% You can use this environment in \LaTeX{} manner---i.e.
% "\begin{bracketsym}" and "\end{bracketsym}", but if you don't want a new
% level of grouping (which is always introduced in \LaTeX{} environments),
% you should type "\bracketsym" and "\endbracketsym" as is usual in
% \AmS-\TeX/Plain\TeX{} (this is preffered).
%
% \DescribeMacro\bop
% \DescribeMacro\sop
% \DescribeMacro\vop
% Package \bk{} also provides three commands for operator typesetting
% "\bop", "\sop" and "\vop".
% All three use bold version of hat accent, "\sop" in addition typesets
% its argument using "\mathsf", "\vop" using "\vec" (intended to be used
% together with \nv---double accents look horrible).
% These commands are in development and now present only some
% variants how operators \emph{might} look.
%
% A simple example
% $$ \bop A,\sop B,\vop C $$
% was typeset from source "\bop A,\sop B,\vop C".
%
% \subsection{Package \bb---Better linebreaks at binary
%   operators/relations}
% \index{binbreak=\protect\bb|usage}\relax
% TeX permits linebreaks after binary relations and operators in math formulas
% unless you set "\binoppenalty=10000", "\relpenalty=10000". So if a linebreak
% occurs after the second~`$+$' in formula \hbox{`$a+b+c+d$'}, you'll get
% `\hbox{$a+b+{}$}' on one line and `\hbox{$c+d$}' on the following. But the
% plus sign should be duplicated on the second line---it should begin
% `\hbox{${}+c+d$}'. And that's the goal of package \bb.
%
% \DescribeMacro\BinBreak
% \DescribeMacro\BinBreakChar
% The package provides commands "\BinBreak" and "\BinBreakChar" for
% converting math symbols to good-breaking symbols. Their syntax are
% \begin{quote}
% "\BinBreak"[\meta{penalty}]\meta{cmd},\hfil\break
% "\BinBreakChar"[\meta{penalty}]\meta{c}\meta{save-cmd},
% \end{quote}
% where \meta{cmd} is command you want to make good-breaking e.g.
% "\wedge" or "\curlyeqprec"---its original meaning is saved in command
% prefixed \texttt{saved}, i.e. "\foo" is saved to "\savedfoo";
% \meta{c} is character symbol you want convert, its original
% meaning is saved to \meta{save-cmd}; optional parameter \meta{penalty} is
% not important here, it's discussed near the end of this section.
% If you say "\BinBreakChar+\mathplus", the character "+" starts to behave as
% is described in the introductory paragraph and you can use "\mathplus"
% when you need the original meaning---an important example is unary plus:
% if you say "+\infty" instead of "\mathplus\infty" then you allow break
% between "+" and "\infty" and thus you can get `$+$' on one line
% and `$+\infty$' on the following---that's clearly incorrect.
%
% \DescribeMacro\BinBreakRedef
% \DescribeMacro\BinBreakSave
% \DescribeMacro\BinBreakHbox
% It's almost a tradition in \TeX{} manuals to say little lies in the first
% description and correct them later\dots{} In fact the command "\BinBreak"
% is always equal to one of "\BinBreakSave", "\BinBreakRedef" or
% "\BinBreakHbox", depending on package options (of course, you can use any of
% the three commands directly). The command "\BinBreakSave"
% is default and does what was stated. "\BinBreakRedef" is almost identical,
% except it doesn't save original meaning of its parameter to "\saved...",
% so it cannot be restored.
% Both can be used only for \emph{non-compound} symbols, i.e. symbols
% consisting of one single `physical' character. But some math symbols are
% \emph{compound} i.e. made up from several `physical'
% characters---the probably most common examples are $\doteq$~("\doteq"),
% $\mapsto$~("\mapsto") and long arrows $\longleftarrow$, $\longrightarrow$,
% etc. For such symbols you have to use "\BinBreakHbox" which works for any
% symbol, but may give slightly worse results. "\BinBreakHbox" always saves
% original command. You don't need to remember what commands are compound,
% just try "\BinBreakSave" or "\BinBreakRedef" and if it doesn't work, use
% "\BinBreakHbox". Package options determinig meaning of "\BinBreak" are
% \texttt{save}, \texttt{redef} and \texttt{hbox}; none means \texttt{save}.
%
% Package \bb{} has also two options determinig behavior of binary relations
% and operators that have \emph{not} been "\BinBreak"ed.
% The default behavior is that linebreaks cannot occur at such symbols and can
% be explicitly selected by option \texttt{nobreak}.
% The other possibility is that they behave as usual i.e. linebreaks are
% peremitted after them and they don't duplicate on the next line---this is
% selected by option \texttt{break}. (But I can't imagine any reason for
% using it.)
%
% Finally, you can specify some of characters "+", "-", "=", "*", "<",
% ">" (separated by commas, as usual) as \bb{} options. They will be
% "\BinBreakChar"ed and their original meanings will be saved to
% "\mathplus", "\mathminus", "\mathequal", "\mathast", "\mathless" and
% "\mathgreater" (in given order). Of course, you can do it yourself using
% "\BinBreakChar".
%
% \DescribeMacro\UnBinBreak
% Any command whose original meaning has been saved can be restored by
% \begin{quote}
% "\UnBinBreak"\meta{cmd},
% \end{quote}
% \DescribeMacro\UnBinBreakChar
% characters can be restored by
% \begin{quote}
% "\UnBinBreakChar"\meta{c}\meta{save-cmd}.
% \end{quote}
% The parameters are the same as in "\BinBreak". I hope you'll never need
% these commands.
%
% Commands "\"["Un"]"BinBreakXXX" don't test much whether their arguments are
% meaningful---they only check if \meta{cmd} is undefined and in such case
% generate warning (warning, \emph{not} error) and do nothing. Commands
% "\"["Un"]"BinBreakChar" don't do any test at all. Since things like
% "\BinBreakChar\par\subsection" leads to errors anyway, it's
% useless to generate them explicitly (and expensively).
%
% And at last---penalties (for the curious). If you don't
% know, what penalties are (in context of \TeX), please read chapter~14 of
% \TeX{}book. Plain\TeX{}, and \LaTeX{} too, sets "\relpenalty=500" and
% "\binoppenalty=700", so penalty for breaking line after binary relations is
% somewhat lower than after binary operators, so \TeX{} will break formula
% more likely at a binary relation than at a binary operator.
%
% All "\BinBreakXXX" macros (except "\BinBreakHbox") chooses linebreak penalty
% as "\relpenalty" if the symbol in question is a binary relation and
% as "\binoppenalty" otherwise (if you don't specify any penaly explicitly).
% Macro "\BinBreakHbox" can't in principle know anything about atom type,
% so it uses value of "\defaultpenalty" if you don't support any.
% Please note penalties are assigned when "\BinBreakXXX" is processed, so if
% you want to change default penatlies, you have to do it \emph{before} you
% start "\BinBreak"-ing anything.
%
% \StopEventually{}
%
% \section{Code documentation}
% All macros are defined using "\newcommand" or "\@ifdefinable" to detect
% conflict with things already defined elsewhere (no tests of this kind are
% done in Plain \TeX{}, at least for now).
%
% \subsection{\LaTeX-like hacks in Plain}
% \begin{macro}{\mm@mathabbr}
% \begin{macro}{\mm@valform}
% \begin{macro}{\mm@binbreak}
% We want things like "\@ifdefinable" to do something harmless (or, better,
% useful) in Plain \TeX{}.
% Also we want to define macros with optional parameters in Plain. But
% first of all we should assure the stuff is not included twice.
%    \begin{macrocode}
%<*package>
%<*plain>
\chardef\atcatcode\catcode`\@\relax
\catcode`\@11\relax
%<mathabbr>\ifx\mm@mathabbr\undefined\let\mm@mathabbr\relax
%<valform>\ifx\mm@valform\undefined\let\mm@valform\relax
%<binbreak>\ifx\mm@binbreak\undefined\let\mm@binbreak\relax
\else
  \message{Warning: being included more than once}%
  \catcode`\@\atcatcode\let\atcatcode\relax\endinput
\fi
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% Some hacks borrowed from \LaTeX{} (but not verbatim, see \cite{olsak})
%    \begin{macrocode}
\ifx\@ifnextchar\undefined
  \long\def\@gobble#1{}
  \long\def\@firstoftwo#1#2{#1}
  \long\def\@secondoftwo#1#2{#2}
  \def\@ifundefined#1{%
  \expandafter\ifx\csname#1\endcsname\relax
    \expandafter\@firstoftwo
  \else
    \expandafter\@secondoftwo
  \fi}
  \def\@ifnextchar#1#2#3{\let\reserved@e#1%
    \def\reserved@a:{#2}\def\reserved@b:{#3}%
    \futurelet\reserved@c\@ifnch}
  \def\@ifnch{%
    \ifx\reserved@c\@sptoken
      \let\reserved@d\reserved@a
    \else
      \ifx\reserved@c\reserved@e
        \let\reserved@d\reserved@a
      \else
        \let\reserved@d\reserved@b
      \fi
    \fi
    \reserved@d:}
  \futurelet\@sptoken{ } %
  \def\@xifnch: {\futurelet\reserved@c\@ifnch}
  \def\@ifstar#1{\@ifnextchar *{\@firstoftwo{#1}}}
%    \end{macrocode}
% \begin{macro}{\newcommand}
% \begin{macro}{\@newcommand}
% and some of my own ("\newcommand" is unusable for anything nontrivial
% anyway, so it's OK making it really trivial
% and put many assumption on its usage)
%    \begin{macrocode}
  \def\@ifbracket#1{\@ifnextchar [{\@firstoftwo{#1}}}
  \let\@ifdefinable\@secondoftwo
  \def\newcommand#1{\@ifbracket{\@newcommand#1[}{\def#1}}
  \def\@newcommand#1[#2]{\ifcase#2\let\reserved@a\@defz
      \or\let\reserved@a\@defi
      \or\let\reserved@a\@defii
      \or\let\reserved@a\@defiii
      \or\let\reserved@a\@defiv\fi
    \reserved@a#1}
  \def\@defz#1{\def#1}
  \def\@defi#1{\expandafter\def\expandafter#1##1}
  \def\@defii#1{\expandafter\def\expandafter#1##1##2}
  \def\@defiii#1{\expandafter\def\expandafter#1##1##2##3}
  \def\@defiv#1{\expandafter\def\expandafter#1##1##2##3##4}
\fi
%</plain>
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \begin{macro}{\@ifbracket}
% "\@ifbracket" has to be defined in \LaTeX{} too
%    \begin{macrocode}
%<latex>\def\@ifbracket#1{\@ifnextchar [{\@firstoftwo{#1}}}
%    \end{macrocode}
% \end{macro}
%
% \subsection{Options handling}
% This is complicated beacuse of possibility of calling packages by
% \mm{} or individually.
%
% \paragraph{Number formating (package \vf).}
% `Times' operator options.
% \begin{macro}{\timesop}
% All is done by appropriate definition of "\timesop" used in "\f" macro.
%    \begin{macrocode}
%<*latex>
%<valform>\DeclareOption{czechf}{\def\timesop{\mathbin.}}
%<moremath>\DeclareOption{czechf}
%<moremath>  {\PassOptionsToPackage{\CurrentOption}{valform}}
%<valform>\DeclareOption{englishf}{\let\timesop\times}
%<moremath>\DeclareOption{englishf}
%<moremath>  {\PassOptionsToPackage{\CurrentOption}{valform}}
%<valform>\DeclareOption{cdotf}{\let\timesop\cdot}
%<moremath>\DeclareOption{cdotf}
%<moremath>  {\PassOptionsToPackage{\CurrentOption}{valform}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\betweenunitskip}
% Units spacing. Define "\betweenunitskip" used in "\f" macro.
%    \begin{macrocode}
%<valform>\DeclareOption{thinsp}{\betweenunitskip\thinmuskip}
%<moremath>\DeclareOption{thinsp}
%<moremath>  {\PassOptionsToPackage{\CurrentOption}{valform}}
%    \end{macrocode}
% Following two are set to \emph{natural} sizes of "\medmuskip",
% "\thickmuskip", because their big stretchability and/or shrinkability is
% something unwanted here
%    \begin{macrocode}
%<valform>\DeclareOption{medsp}{\betweenunitskip4mu}
%<moremath>\DeclareOption{medsp}
%<moremath>  {\PassOptionsToPackage{\CurrentOption}{valform}}
%<valform>\DeclareOption{thicksp}{\betweenunitskip5mu}
%<moremath>\DeclareOption{thicksp}
%<moremath>  {\PassOptionsToPackage{\CurrentOption}{valform}}
%    \end{macrocode}
% \end{macro}
%
% \paragraph{Vector style options (package \nv).}
% Fonts are declared inside of options to avoid occupying more math families
% than neccessary (bold math italic which is declared always plus usually
% one more family if you don't use \texttt{arrowvec} alone).
% Vector commands are simply "\let"ted to according font change commands.
%
% \begin{macro}{\mathslsfbx}
% \begin{macro}{\slsfbxvec}
% Slanted Sans Serif Bold Extended font is unknown to \LaTeX, so we have
% to declare the shape first.
% Doesn't work in old NFSS. I don't know why (and don't want to know).
%    \begin{macrocode}
%<*newvec>
\DeclareOption{yetivec}{%
  \input{ot1cmvec.fd}%
  \DeclareMathAlphabet{\mathslsfbx}{OT1}{cmss}{bx}{sl}
  \let\slsfbxvec\mathslsfbx\let\vec\slsfbxvec}
%</newvec>
%<moremath>\DeclareOption{yetivec}
%<moremath>  {\PassOptionsToPackage{\CurrentOption}{newvec}}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\mathsfbx}
% \begin{macro}{\sfbxvec}
% Sans Serif Bold Extended font works even with NFSS1 and gives acceptable
% results.
%    \begin{macrocode}
%<*newvec>
\DeclareOption{sfboldvec}{%
  \DeclareMathAlphabet{\mathsfbx}{OT1}{cmss}{bx}{n}
  \let\sfbxvec\mathsfbx\let\vec\sfbxvec}
%</newvec>
%<moremath>\DeclareOption{sfboldvec}
%<moremath>  {\PassOptionsToPackage{\CurrentOption}{newvec}}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\mibvec}
% Standard bold math italic defined always (later in package).
%    \begin{macrocode}
%<*newvec>
\DeclareOption{itboldvec}{\let\mibvec\mib\let\vec\mibvec}
%</newvec>
%<moremath>\DeclareOption{itboldvec}
%<moremath>  {\PassOptionsToPackage{\CurrentOption}{newvec}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\rmbxvec}
% This also works good always.
%    \begin{macrocode}
%<*newvec>
\DeclareOption{rmboldvec}{%
  \let\rmbxvec\mathbf\let\vec\sfbxvec}
%</newvec>
%<moremath>\DeclareOption{rmboldvec}
%<moremath>  {\PassOptionsToPackage{\CurrentOption}{newvec}}
%    \end{macrocode}
% \end{macro}
%
% And old awful arrows. "\arrowvec" is defined always (later in package).
%    \begin{macrocode}
%<newvec>\DeclareOption{arrowvec}{\let\vec\arrowvec}
%<moremath>\DeclareOption{arrowvec}
%<moremath>  {\PassOptionsToPackage{\CurrentOption}{newvec}}
%</latex>
%    \end{macrocode}
%
% \subsection{One character symbols}
% \begin{macro}{\CC}
% \begin{macro}{\EE}
% \begin{macro}{\II}
% \begin{macro}{\NN}
% \begin{macro}{\QQ}
% \begin{macro}{\RR}
% \begin{macro}{\ZZ}
% Symbols for number sets.
% "\mathbb" is defined in \textsf{amssymb} package which is required for
% \emph{using} these symbols
%    \begin{macrocode}
%<*mathabbr>
%<*plain|latex>
\newcommand\CC{\mathbb C}
\newcommand\EE{\mathbb E}
\newcommand\II{\mathbb I}
\newcommand\NN{\mathbb N}
\newcommand\QQ{\mathbb Q}
\newcommand\RR{\mathbb R}
\newcommand\ZZ{\mathbb Z}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\ee}
% \begin{macro}{\im}
% \begin{macro}{\dd}
% \begin{macro}{\Df}
% Roman type characters.
% "\dd" and "\Df" are now defined using "\operator@font",
% even if I don't want spaces
% around (well, I want space \emph{before}, but it's another chapter).
%    \begin{macrocode}
%<plain>\def\operator@font{\rm}
%<plain>\def\mathrm#1{{\rm#1}}
\newcommand\ee{\mathrm e}
\newcommand\im{\mathrm i}
\newcommand\dd{{\operator@font d}}
\newcommand\Df{{\operator@font D}}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \subsection{Roman type symbols}
% \begin{macro}{\Tr}
% Some `operators'
%    \begin{macrocode}
\newcommand\Tr{\mathop{\operator@font Tr}\nolimits}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\tg}
% \begin{macro}{\arctg}
% \begin{macro}{\cotg}
% \begin{macro}{\arccotg}
% \begin{macro}{\tgh}
% \begin{macro}{\cotgh}
% \begin{macro}{\sinc}
% Tangens, cotangens (thanx to Adam Dubroka) their arguments, and their
% hyperbolic versions in czech notation and some more functions
%    \begin{macrocode}
\newcommand\tg{\mathop{\operator@font tg}\nolimits}
\newcommand\arctg{\mathop{\operator@font arctg}\nolimits}
\newcommand\cotg{\mathop{\operator@font cotg}\nolimits}
\newcommand\arccotg{\mathop{\operator@font arccotg}\nolimits}
\newcommand\tgh{\mathop{\operator@font tgh}\nolimits}
\newcommand\cotgh{\mathop{\operator@font cotgh}\nolimits}
\newcommand\sinc{\mathop{\operator@font sinc}\nolimits}
%</plain|latex>
%</mathabbr>
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \subsection{Macros for value formatting---\vf{} package}
% Many macros here are made `public' (don't contain \@'s) since
% they're intended to be redefinable by user.
%
% \begin{macro}{\if@frestoremath}
% \begin{macro}{\if@firstunit}
% \begin{macro}{\betweenunitskip}
% \begin{macro}{\timesop}
% Some allocations
%    \begin{macrocode}
%<*valform>
%<*plain|latex>
\newif\if@frestoremath
\newif\if@firstunit
\@ifdefinable\timesop{}
\newmuskip\betweenunitskip
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \begin{macro}{\f}
% Make sure commands are not defined yet---"\f@rg" is local to group so
% needn't be checked.
% "\f" just adds a space to the end of argument and calls "\@f".
%    \begin{macrocode}
\@ifdefinable\f{\def\f#1|{\@f#1 |}}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\@f}
% \begin{macro}{\cut@e}
% \begin{macro}{\g@bbletoe}
% First test if we are in math mode and set "\if@frestoremath" accordinly.
% Set \verb:\mathcode`\,="013B: to take respect to possible czech format of
% number (i.e. 0,5772 instead of 0.5772) (this is set back to \verb:"613B:
% in "\form@units" before units formating begins and anyway it's all inside
% a group).
% Then test presence of `\texttt{e}' by defining "\f@arg" as everything after
% `\texttt{e}' in "#1e", so "\ifx\f@arg\empty" is
% true iff parameter~1 doesn't contain~`\texttt{e}'.
% In the case when `\texttt{e}' is present, "\cutexp@e" simply splits
% argument at it and typeset the exponent.
% Then we start formatting units with "\form@units".
%    \begin{macrocode}
\@ifdefinable\g@bbletoe{%
\def\g@bbletoe#1e{}}
\@ifdefinable\cutexp@e{%
\def\cutexp@e#1e#2\end{#1\timesop10^{#2}}}
\@ifdefinable\@f{%
\def\@f#1 {\ifmmode\@frestoremathtrue\else\@frestoremathfalse$\fi%
  \mathcode`\,="013B\relax\edef\f@rg{\g@bbletoe#1e}%
  \ifx\f@rg\empty#1\else\cutexp@e#1\end\fi\form@units}}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \begin{macro}{\form@units}
% Restore \verb:\mathcode`\,="613B: and
% set "\@firstunittrue".
% Switch to roman font---use `globally' "\rm" because using "\mathrm" in
% "\form@nextunit" causes weird error \texttt{!~Undefined control sequence}
% "\textfont@name"---probably something is expanded in a way I cannot rule.
% Too bad! (Anyway "\mathrm" is not defined in Plain).
% Add \verb*: \end{} : to argument (spaces are important) and do
% "\form@nextunit"
%    \begin{macrocode}
\@ifdefinable\form@units{
\def\form@units#1|{\mathcode`\,="613B\begingroup\@firstunittrue\rm
  \form@nextunit#1 \end{} \if@frestoremath\relax\else$\fi}}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\form@nextunit}
% Step by step convert spaces to "\betweenunits".
% Test "\ifx\empty\f@rg" allows skiping redundant spaces especially the
% last appedned by "\f" (this can produce several consecutive space tokens
% like \verb*: {} :, but we don't want to convert such spaces to
% "\betweenunits").
% "\if@firstunit" is set to false after first pass so "\beforeunits"
% is always inserted between number and units and "\betweenunits" between
% units.
% "\if@firstunit" is also used in last pass for deciding whether insert
% "\afterunits"---it should be inserted only if some units were present.
%    \begin{macrocode}
\@ifdefinable\form@nextunit{%
\def\form@nextunit#1 {\ifx\end#1\let\next\endgroup
    \if@firstunit\else\afterunits\fi
  \else\edef\f@rg{#1}\ifx\empty\f@rg\else
  \if@firstunit\beforeunits\relax#1
    \else\betweenunits\relax#1\fi
  \@firstunitfalse\fi
  \let\next\form@nextunit\fi\next}}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\afterunits}
% \begin{macro}{\beforeunits}
% \begin{macro}{\betweenunits}
% Define default thing before, between and after units
%    \begin{macrocode}
\newcommand\betweenunits{\mskip\betweenunitskip\relax}
\@ifdefinable\beforeunits{\let\beforeunits\betweenunits}
\@ifdefinable\afterunits{\let\afterunits\relax}
%</plain|latex>
%</valform>
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \emph{Very} obsolete command "\dexp"\index{dexp=\verb+\dexp+}
% removed once for all 1998/05/03,
% if you translate "\dexp{#1}{#2}{#3}" to "\f#1e#2 #3|"
% you get \emph{much} better results.
%
% \subsection{Fractions}
% \begin{macro}{\fracd}
% \begin{macro}{\@fracd}
% \begin{macro}{\@fracds}
% \begin{macro}{\fract}
% \begin{macro}{\fracnot}
% Fraction in textstyle, displaystyle size---with and without "\strut".
% Fraction which doesn't change style "\fracnot" in fact switches one style
% `up' assuming "\over" will switch one style `down'.
% Macro "\fracd" uses "\@ifstar" to decide wheter insert "\struct" to
% numerator and denominator.
%    \begin{macrocode}
%<*mathabbr>
%<*plain|latex>
\newcommand\fracd{\@ifstar\@fracds\@fracd}
\newcommand\@fracd[2]{{\displaystyle{#1\over#2}}}
\newcommand\@fracds[2]{{\displaystyle{\strut#1\over\strut#2}}}
\newcommand\fract[2]{{\textstyle{#1\over#2}}}
\newcommand\fracnot[2]{{\mathchoice{\displaystyle}{\displaystyle}
  {\textstyle}{\scriptstyle}{#1\over#2}}}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\prefixfrac}
% \begin{macro}{\@prefixfrac}
% \begin{macro}{\@@prefixfrac}
% Next we want to define macros "\partf" and "\diff" for partial and total
% derivation, but because they differ only in the symbol inserted to
% numerator and denominator, we define "\prefixfrac" which takes as first
% argument symbol to insert and then tests if next character is~"2"---it
% allows "\partf2" to beahve like macro different from "\partf" even if
% "2"~is not a letter.
%    \begin{macrocode}
\newcommand\prefixfrac[1]%
  {\@ifnextchar2{\@@prefixfrac#1}{\@prefixfrac#1}}
\newcommand\@prefixfrac[3]{{#1#2\over#1#3}}
\@ifdefinable\@@prefixfrac
  {\def\@@prefixfrac#12#2#3{{#1^2#2\over#1#3{}^2}}}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
% Partial derivation fraction "\partf" have been originally named "\pfrac", but
% 1998/08/10 was renamed from to "\partf" to avoid conflict with prevalent
% \AmS\TeX command. "\partf" and "\diff" are now defined using "\prefixfrac"
% \begin{macro}{\partf}
% \begin{macro}{\diff}
%    \begin{macrocode}
\newcommand\partf{\prefixfrac\partial}
\newcommand\diff{\prefixfrac\dd}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% Second order partial derivation.
% \begin{macro}{\pardf}
%    \begin{macrocode}
\newcommand\pardf[3]%
  {{\partial^2#1\over\partial#2\,\partial#3}}
%</plain|latex>
%</mathabbr>
%    \end{macrocode}
% \end{macro}
%
% \subsection{Vectors---\nv{} package}
% Font decalration is now done in option handling part, so no redundant
% fonts are declared (see above).
% \begin{macro}{\arrowvec}
% Save old "\vec" as "\arrowvec".
%    \begin{macrocode}
%<*newvec>
%<*latex>
\@ifdefinable\arrowvec{\let\arrowvec\vec}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@notknownvecstyle}
% Handle using not defined vector styles.
%    \begin{macrocode}
\newcommand{\@notknownvecstyle}[1]{\PackageWarning{NewVec}
  {Vector style \noexpand#1 wasn't defined. Making it equal^^J
   current vector style}\global\let#1\vec#1}
\newcommand{\slsfbxvec}{\@notknownvecstyle\slsfbxvec}
\newcommand{\sfbxvec}{\@notknownvecstyle\sfbxvec}
\newcommand{\mibvec}{\@notknownvecstyle\mibvec}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\mib}
% \index{boldletters=\texttt{boldletters}|main}
% \index{bold Greek letters|main}
% Declare bold math italic as new independent symbol font.
%    \begin{macrocode}
\DeclareSymbolFont{boldletters}{OML}{cmm}{b}{it}
\DeclareSymbolFontAlphabet{\mib}{boldletters}
\DeclareMathSymbol{\Balpha}{\mathord}{boldletters}{"0B}
\DeclareMathSymbol{\Bbeta}{\mathord}{boldletters}{"0C}
\DeclareMathSymbol{\Bgamma}{\mathord}{boldletters}{"0D}
\DeclareMathSymbol{\Bdelta}{\mathord}{boldletters}{"0E}
\DeclareMathSymbol{\Bepsilon}{\mathord}{boldletters}{"0F}
\DeclareMathSymbol{\Bzeta}{\mathord}{boldletters}{"10}
\DeclareMathSymbol{\Beta}{\mathord}{boldletters}{"11}
\DeclareMathSymbol{\Btheta}{\mathord}{boldletters}{"12}
\DeclareMathSymbol{\Biota}{\mathord}{boldletters}{"13}
\DeclareMathSymbol{\Bkappa}{\mathord}{boldletters}{"14}
\DeclareMathSymbol{\Blambda}{\mathord}{boldletters}{"15}
\DeclareMathSymbol{\Bmu}{\mathord}{boldletters}{"16}
\DeclareMathSymbol{\Bnu}{\mathord}{boldletters}{"17}
\DeclareMathSymbol{\Bxi}{\mathord}{boldletters}{"18}
\DeclareMathSymbol{\Bpi}{\mathord}{boldletters}{"19}
\DeclareMathSymbol{\Brho}{\mathord}{boldletters}{"1A}
\DeclareMathSymbol{\Bsigma}{\mathord}{boldletters}{"1B}
\DeclareMathSymbol{\Btau}{\mathord}{boldletters}{"1C}
\DeclareMathSymbol{\Bupsilon}{\mathord}{boldletters}{"1D}
\DeclareMathSymbol{\Bphi}{\mathord}{boldletters}{"1E}
\DeclareMathSymbol{\Bchi}{\mathord}{boldletters}{"1F}
\DeclareMathSymbol{\Bpsi}{\mathord}{boldletters}{"20}
\DeclareMathSymbol{\Bomega}{\mathord}{boldletters}{"21}
\DeclareMathSymbol{\Bvarepsilon}{\mathord}{boldletters}{"22}
\DeclareMathSymbol{\Bvartheta}{\mathord}{boldletters}{"23}
\DeclareMathSymbol{\Bvarpi}{\mathord}{boldletters}{"24}
\DeclareMathSymbol{\Bvarrho}{\mathord}{boldletters}{"25}
\DeclareMathSymbol{\Bvarsigma}{\mathord}{boldletters}{"26}
\DeclareMathSymbol{\Bvarphi}{\mathord}{boldletters}{"27}
\DeclareMathSymbol{\BGamma}{\mathalpha}{boldletters}{"00}
\DeclareMathSymbol{\BDelta}{\mathalpha}{boldletters}{"01}
\DeclareMathSymbol{\BTheta}{\mathalpha}{boldletters}{"02}
\DeclareMathSymbol{\BLambda}{\mathalpha}{boldletters}{"03}
\DeclareMathSymbol{\BXi}{\mathalpha}{boldletters}{"04}
\DeclareMathSymbol{\BPi}{\mathalpha}{boldletters}{"05}
\DeclareMathSymbol{\BSigma}{\mathalpha}{boldletters}{"06}
\DeclareMathSymbol{\BUpsilon}{\mathalpha}{boldletters}{"07}
\DeclareMathSymbol{\BPhi}{\mathalpha}{boldletters}{"08}
\DeclareMathSymbol{\BPsi}{\mathalpha}{boldletters}{"09}
\DeclareMathSymbol{\BOmega}{\mathalpha}{boldletters}{"0A}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\makeatvec}
% \begin{macro}{\makeatat}
% "\makeatvec" makes~\at{} active in math mode by assigning it math code
% \verb|"8000| and lets it equal "\vec".
% It also defines meaning of \at{} every time it's used---we don't know
% whether it has been redefined by user.
% Macros "\makeatvec" and "\makeatat" are assumed to be used out of math
% mode.
% "\let@\vec" is not good, beacuse meaning \at{} should follow meaning of
% "\vec".
% When we define "\makeatvec", we need \at{} to be active, beacuse its
% expansion contains "\def@"\ldots.
%    \begin{macrocode}
\@ifdefinable\m@thatsign{\mathchardef\m@thatsign=\mathcode`\@}
\@ifdefinable\makeatvec{\relax}
{\catcode`\@\active
  \gdef\makeatvec
    {{\catcode`\@\active\gdef@{\vec}}\mathcode`\@"8000\relax}}
\newcommand\makeatat{\mathcode`\@\m@thatsign\relax}
%</latex>
%</newvec>
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \subsection{Macros for Dirac bra and ket notation---\bk{} package}
% \begin{macro}{\bra}
% \begin{macro}{\ket}
% Still under construction.
% "\verythinmuskip" is now adjusted that the spacing verges on spacing in
% Form\'anek, J.: \'Uvod do kvantov\'e mechaniky.
% "\ack" is defined as "\mathinner" because it gives proper spacing for most
% combination of possible adjacent atoms.
%    \begin{macrocode}
%<*bracketsym>
%<*latex>
\DeclareOption{ymsbm}
  {\def\ack{\RequirePackage{amssyymb}}%
   \br@ketcorr\@ne mu
   \def\bra{\ybra\mskip\br@ketcorr}%
   \def\ket{\mskip\br@ketcorr\yket}}
\DeclareOption{latexonly}
  {\def\ack{\relax}%
   \br@ketcorr1.5mu
   \def\bra{\langle\mskip\br@ketcorr}%
   \def\ket{\mskip\br@ketcorr\rangle}}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\br@ketcorr}
% Define new length (muskip) "\br@ketcorr"---space inserted at inner side
% of braket. Its value depends on type of angle bracket used.
%    \begin{macrocode}
\newmuskip\br@ketcorr
%    \end{macrocode}
% \end{macro}
%
% \LaTeX\ don't allow to use "\RequirePackage" in options, so we have just
% defined "\ack" to "\RequirePackage{amssyymb}" or "\relax" depending on used
% option there.
% After "\ProcessOptions" we execute "\ack" and then redefine it to its
% proper meaning.
% But first of all we test if "\ack" and the others are definable.
% \begin{macro}{\ack}
%    \begin{macrocode}
\@ifdefinable\ack{}%
\@ifdefinable\bra{}%
\@ifdefinable\ket{}%
\ExecuteOptions{latexonly}
\ProcessOptions
\ack
\def\ack{\mathinner\vert}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\bop}
% \begin{macro}{\sop}
% \begin{macro}{\vop}
% "\vop", "\sop" and "\bop" are variants how operators can look.
% "\vop" may work bad in other size than 10$\,$pt.
%    \begin{macrocode}
\newcommand\bop[1]{\mathbf{\hat{\mit#1}}}
\newcommand\vop[1]{\mathbf{\hat{\vec{#1}\mskip4mu}\mskip-4mu}}
\newcommand\sop[1]{\mathbf{\hat{\mathsf{#1}}}}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\bracketsym}
% \begin{macro}{\endbracketsym}
% \begin{macro}{\m@thvert}
% Environment \texttt{bracketsym}---"\mathcode" hacks for easy typing.
% Macros use simmilar trick as "\makeatvec" and "\makeatat", again we want to
% define meaning of "<", ">" and~"|" every time "\bracketsym" is used.
% If we didn't, some packages like \textsf{shortverb} could overwrite the
% meaning with no way of restoring it.
% \index{<={\tt<}|main}\index{!>={\tt!>}|main}\index{!|={\tt!|}|main}
%    \begin{macrocode}
\@ifdefinable\m@athvert{\mathchardef\m@thvert\mathcode`\|}
\@ifdefinable\bracketsym{\relax}
{\catcode`\<\active\catcode`\|\active\catcode`\>\active
  \gdef\bracketsym
    {{\catcode`\<\active\catcode`\|\active\catcode`\>\active
      \global\let<\bra\global\let|\ack\global\let>\ket}
    \mathcode`\<"8000\mathcode`\|"8000\mathcode`\>"8000\relax}}
\def\endbracketsym{\mathcode`\<\ls
  \mathcode`\|\m@thvert\mathcode`\>\gr\relax}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\gr}
% \begin{macro}{\ls}
% We should make available the relation symbols $<$ and~$>$ inside of
% \texttt{bracketsym} ($\vert$~is available as "\vert").
%    \begin{macrocode}
\@ifdefinable\gr{\mathchardef\gr\mathcode`\>}
\@ifdefinable\ls{\mathchardef\ls\mathcode`\<}
%</latex>
%</bracketsym>
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \subsection{Nice linebreaks at binary operators and relations---\bb{}
% package }
% This package implemets idea published in \cite{olsak}, pg. 160--161.
%
% Package options determining default method of manipulation with original
% command simply "\let\BinBreak" to particular macros
%    \begin{macrocode}
%<*binbreak>
%<*latex>
\DeclareOption{redef}{\let\BinBreak\BinBreakRedef}
\DeclareOption{save}{\let\BinBreak\BinBreakSave}
\DeclareOption{hbox}{\let\BinBreak\BinBreakHbox}
%    \end{macrocode}
%
% Options specifying charaters that should produce nice-breaking
% operators or relations
%    \begin{macrocode}
\DeclareOption{=}{\BinBreakChar[\savedrelpenalty]=\mathequal}
\DeclareOption{+}{\BinBreakChar[\savedbinoppenalty]+\mathplus}
\DeclareOption{-}{\BinBreakChar[\savedbinoppenalty]-\mathminus}
\DeclareOption{*}{\BinBreakChar[\savedbinoppenalty]*\mathast}
\DeclareOption{<}{\BinBreakChar[\savedrelpenalty]<\mathless}
\DeclareOption{>}{\BinBreakChar[\savedrelpenalty]>\mathgreater}
%    \end{macrocode}
%
% Defaults for things not redefined by "\BinBreakXXX"
%    \begin{macrocode}
\DeclareOption{break}{\set@binbreak}
\DeclareOption{nobreak}{\set@binnobreak}
%</latex>
%    \end{macrocode}
%
% \begin{macro}{\comp@mch}
% \begin{macro}{\comp@ch}
% \begin{macro}{\gobble@mch}
% Macros "\comp@mch", "\comp@ch" and "\gobble@mch" expect as argument output of
% "\meaning"\meta{mch}, where \meta{mch} is command defined via
% "\mathchardef".
% The first just uses this information to reconstruct the "\mathchar", the
% second reconstruct the character for use in horizontal mode (needed in
% arguments of "\discretionary" which are processed in horizontal mode).
% The third simply gobbles the "\matchar" part.
% All three macros are intended to be used
% "\expandafter"\allowbreak"\comp@"["m"]"ch"\allowbreak"\meaning"\meta{mch}".".
%    \begin{macrocode}
%<*plain|latex>
\@ifdefinable\comp@mch
  {\def\comp@mch#1"#2.{\mathchar"#2 }}
\@ifdefinable\comp@ch
  {\def\comp@ch#1"#2#3#4.{\the\textfont"#3\char"#4 }}
\@ifdefinable\gobble@mch
  {\def\gobble@mch#1"#2.{"#2 }}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\mch@penalty}
% And yet another variation on the same theme:
% Macro "\mch@penalty" expands to value of
% saved "\relpenalty" (susally 500) if argument is binary relation and to
% value of saved "\binoppenalty" (usualy 700) otherwise.
%    \begin{macrocode}
\@ifdefinable\mch@penalty
  {\def\mch@penalty#1"#2#3#4.{\ifnum#3=3\relax\savedrelpenalty
    \else\savedbinoppenalty\fi }}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\bb@brackpen}
% Macro "\mch@penalty" is used by "\bb@brackpen" which puts the computed
% penalty to brackets to make it usable as default value of optional
% parameter of "\BinBreakXXX", repeating it.
%    \begin{macrocode}
\newcommand\bb@brackpen[1]%
  {[\expandafter\mch@penalty\meaning#1.]#1}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\bb@access}
% Macro "\bb@access" typesets its argument an forgets it again, nevertheless
% \LaTeX{} is forced to load appropriate font.
%    \begin{macrocode}
\newcommand\bb@access[1]%
  {\begingroup\setbox0\hbox{$#1$}\endgroup}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\s@ved}
% "\s@ved" is defined just to save memory, the word ``saved'' is often
% used below.
%    \begin{macrocode}
\newcommand\s@ved{saved}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\already@saved}
% Warning generated by "\BinBreakXXX" when command is already saved
% is always the same.
%    \begin{macrocode}
\newcommand\already@saved[1]%
%<latex> {\PackageWarning{BinBreak}
%<plain> {\message
  {Request to redefine already redefined and saved command \noexpand#1
   was ignored}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\BinBreakRedef}
% \begin{macro}{\@BinBreakRedef}
% Command "\BinBreakRedef" redefines it's argument (which is assumed to be a
% single command defined via "\mathchardef") by adding
% "\discretionary{}{"\meta{post-break}"}{}", where \meta{post-break} contains
% copy of the character defined for use in horizontal mode.
% So when line-break occures at the character, then it's copied to beginig
% of next line. Any possible space after the character (implied by its
% atom-type) appears after the material from "\discretionary", so everthing
% works fine.
%
% The only problem is that arguments of "\discretionary" are processed in
% horizontal mode so you can't use "\mathchar"s and a "\textfont"-trick is
% needed.
%    \begin{macrocode}
\newcommand\BinBreakRedef{\@ifbracket{\@BinBreakRedef[}%
  {\expandafter\@BinBreakRedef\bb@brackpen}}
\@ifdefinable\@BinBreakRedef
  {\def\@BinBreakRedef[#1]#2{\bb@access#2%
    \@ifundefined{\s@ved\expandafter\@gobble\string#2}%
      {\edef#2{\begingroup\set@binnobreak
        \expandafter\exhyphenpenalty#1\relax
        \expandafter\comp@mch\meaning#2.%
        \discretionary{}{\expandafter\comp@ch\meaning#2.}{}%
        \endgroup}}%
    {\already@saved{#2}}}}%
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\BinBreakSave}
% \begin{macro}{\@BinBreakSave}
% Command "\BinBreakSave" work on the same priciple as previous command, but
% is saves original meaning of it's argumed in control sequence prefixed by
% the word ``saved''.
%    \begin{macrocode}
\newcommand\BinBreakSave{\@ifbracket{\@BinBreakSave[}%
  {\expandafter\@BinBreakSave\bb@brackpen}}
\@ifdefinable\@BinBreakSave
  {\def\@BinBreakSave[#1]#2{\bb@access#2%
    \@ifundefined{\s@ved\expandafter\@gobble\string#2}%
      {\expandafter\let\csname\s@ved%
         \expandafter\@gobble\string#2\endcsname#2
       \edef#2{\begingroup\set@binnobreak
         \expandafter\exhyphenpenalty#1\relax
         \expandafter\noexpand\csname\s@ved%
         \expandafter\@gobble\string#2\endcsname
         \discretionary{}{\expandafter\comp@ch\meaning#2.}{}%
         \endgroup}}%
       {\already@saved{#2}}}}%
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\BinBreakHbox}
% \begin{macro}{\@BinBreakHbox}
% The third redefining macro, "\BinBreakHbox" saves original meaning of its
% argument by the same way as previous commands, but it doesn't assume, it
% has been defined via "\mathchardef" so puts
% "\hbox{$\saved"\meta{argument}"$}" into \meta{post-break}.
% Thus it can be used for compound symbols (like $\bowtie$~"\bowtie" or
% $\doteq$~"\doteq"). Since there's little chance we can guess atom type here,
% we jusr use value of "\defaultpenalty" for penalty if user doesn't specify
% any.
%    \begin{macrocode}
\newcommand\BinBreakHbox{\@ifbracket{\@BinBreakHbox[}%
  {\@BinBreakHbox[\defaultpenalty]}}
\@ifdefinable\@BinBreakHbox
  {\def\@BinBreakHbox[#1]#2{\bb@access#2%
    \@ifundefined{\s@ved\expandafter\@gobble\string#2}%
     {\expandafter\let\csname\s@ved%
        \expandafter\@gobble\string#2\endcsname#2
      \edef#2{\begingroup\set@binnobreak
        \expandafter\exhyphenpenalty#1\relax
        \expandafter\noexpand\csname\s@ved%
        \expandafter\@gobble\string#2\endcsname
        \discretionary{}{\hbox
          {\m@th$\expandafter\noexpand\csname\s@ved%
           \expandafter\@gobble\string#2\endcsname$}}{}%
        \endgroup}}%
     {\already@saved{#2}}}}
%    \end{macrocode}
%\end{macro}
%\end{macro}
%
% \begin{macro}{\BinBreakChar}
% \begin{macro}{\@BinBreakChar}
% \begin{macro}{\@BinBreakCharPen}
% Single characters ($+$, $=$, etc.) are made active in math mode and expand
% to "\discretionary...".
% Their meaning is defined using "\lowercase" trick---see \textsf{shortvrb}
% code documentation for explanation. The "\mch@penalty" usage for computing
% penalty is more complicated here, since "\meaning+" doesn't give mathcode
% of plus sign, but the string "the character +". So we have to define
% a control sequence on which we apply "\meaning" first---this is solved in
% "\@BinBreakCharPen", where "\reserved@a" is defined to alias of redefined
% character and then "\reserved@b" to desired penalty
% (The control sequence to which meaning of the character
% is saved cannot be used, because we have to know the penalty before we
% save the meaning.)
%
% We have to typeset the character as "\hbox{\m@th$#3$}" because the
% post-break text is typeset in horizontal mode even if the break occurs in
% math mode (2004/04/19).
%    \begin{macrocode}
\newcommand\BinBreakChar{\@ifbracket{\@BinBreakChar[}%
  {\@BinBreakCharPen}}
\newcommand\@BinBreakCharPen[1]%
  {\mathchardef\reserved@a\mathcode`#1
   \edef\reserved@b{\expandafter\mch@penalty\meaning\reserved@a.}%
   \expandafter\@BinBreakChar\expandafter[\reserved@b]#1}
\@ifdefinable\@BinBreakChar
   {\def\@BinBreakChar[#1]#2#3{\bb@access#2%
     \mathchardef#3\mathcode`#2
      \begingroup\catcode`~\active
        \lccode`\~`#2\catcode`#2\active
        \lowercase{\gdef~{\begingroup\set@binnobreak
          \expandafter\exhyphenpenalty#1\relax
          #3\discretionary{}{\hbox{\m@th$#3$}}{}\endgroup}}\endgroup
      \mathcode`#2"8000}}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\UnBinBreak}
% "\UnBinBreak\foo" just tests if "\savedfoo" is defined and then
% lets "\foo" equal to "\savedfoo" and undefines "\savedfoo".
%    \begin{macrocode}
\newcommand\UnBinBreak[1]%
 {\@ifundefined{\s@ved\expandafter\@gobble\string#1}
%<latex> {\PackageWarning{BinBreak}
%<plain> {\message
  {Cannot restore \noexpand#1---original meaning was not saved}}%
  {\expandafter\let\expandafter#1%
     \csname\s@ved\expandafter\@gobble\string#1\endcsname
   \expandafter\let\csname\s@ved%
     \expandafter\@gobble\string#1\endcsname
     \undefined}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\UnBinBreakChar}
% A little less dirty macro than "\BinBreakChar".
% It just uses four "\expandafter"s, because we need to construct rhs of
% "\mathcode" first.
%    \begin{macrocode}
\newcommand\UnBinBreakChar[2]%
 {\expandafter\mathcode%
   \expandafter`\expandafter#1%
   \expandafter\gobble@mch\meaning#2.%
   \let#2\undefined}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\savedrelpenalty}
% \begin{macro}{\savedbinoppenalty}
% \begin{macro}{\set@binbreak}
% \begin{macro}{\set@binnobreak}
% Save penalties and define "\set@binbreak" and "\set@binnobreak" to
% allow/disallow linebreaks at binary operators and relations.
%    \begin{macrocode}
\@ifdefinable\savedrelpenalty
  {\xdef\savedrelpenalty{\the\relpenalty}}
\@ifdefinable\savedbinoppenalty
  {\xdef\savedbinoppenalty{\the\binoppenalty}}
\newcommand\set@binnobreak
  {\relpenalty\@M\relax
   \binoppenalty\@M\relax}
\newcommand\set@binbreak
  {\expandafter\relpenalty\savedrelpenalty\relax
   \expandafter\binoppenalty\savedbinoppenalty\relax}
\edef\defaultpenalty{\savedbinoppenalty}
%</plain|latex>
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\setbinbreak}
% \begin{macro}{\setnobinbreak}
% Define public aliases of "\set@binbreak" and "\set@binnobreak" in Plain
% and set up defaults to nobreak and save.
%    \begin{macrocode}
%<*plain>
\let\setbinbreak\set@binbreak
\let\setnobinbreak\set@binnobreak
\setnobinbreak
\let\BinBreak\BinBreakSave
%</plain>
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% Process options---default is `save' and `nobreak' (changed 2000/05/17 from
% `break', so it's incompatible with \bb{} 0.9.x).
%    \begin{macrocode}
%<*latex>
\ExecuteOptions{save,nobreak}
\ProcessOptions
%</latex>
%</binbreak>
%    \end{macrocode}
%
% \subsection{Miscellaneous commands and abbreviations}
% Define "\ensuremath" in Plain, since we make use of it sometimes.
%    \begin{macrocode}
%<*mathabbr>
%<plain>\def\ensuremath#1{\ifmmode#1\else$#1$\fi}
%    \end{macrocode}
%
% Following macros are just simple abbreviations so code needs no commenting.
% \begin{macro}{\nlist}
% \begin{macro}{\@nlist}
%    \begin{macrocode}
%<*plain|latex>
\newcommand\nlist{\@ifbracket{\@nlist[}{\@nlist[1]}}
\@ifdefinable\@nlist
  {\def\@nlist[#1]#2#3{\ensuremath{#2_{#1},\ldots,#2_{#3}}}}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\degree}
% Commands "\circ" in small sizes and/or resolutions seems to produce variety
% of ellipses rather than cricles, but it't the best we have.
%    \begin{macrocode}
\newcommand\degree{\ensuremath{{}^\circ}}
%    \end{macrocode}
% \end{macro}
%
% Celsius, Farenheit and R\'eamur degree (need some kerning)
% (thanx to Josef Tkadlec).
% \begin{macro}{\oC}
% \begin{macro}{\oF}
% \begin{macro}{\oR}
%    \begin{macrocode}
\newcommand\oC{{{}^\circ\mkern-2mu\mathrm C}}
\newcommand\oF{{{}^\circ\mkern-1mu\mathrm F}}
\newcommand\oR{{{}^\circ\mkern-1mu\mathrm R}}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\floor}
% \begin{macro}{\ceil}
%    \begin{macrocode}
\newcommand\floor[1]{\left\lfloor#1\right\rfloor}
\newcommand\ceil[1]{\left\lceil#1\right\rceil}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\8}
%    \begin{macrocode}
\@ifdefinable\8{\let\8\infty}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\W}
% \begin{macro}{\w}
%    \begin{macrocode}
\@ifdefinable\W{\let\W\Omega}
\@ifdefinable\w{\let\w\omega}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\inty}
% \begin{macro}{\inti}
%    \begin{macrocode}
\newcommand\inty{\int_{-\infty}^{+\infty}}
\newcommand\inti{\intop_{-\infty}^{+\infty}}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\impl}
%    \begin{macrocode}
\newcommand\impl{\ensuremath{\Rightarrow}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\dop}
%    \begin{macrocode}
\mathchardef\dop="213A\relax
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\(}
% \begin{macro}{\)}
%    \begin{macrocode}
\def\({\left(}
\def\){\right)}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \begin{macro}{\[}
% \begin{macro}{\]}
%    \begin{macrocode}
\def\[{\left[}
\def\]{\right]}
%</plain|latex>
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\eqn}
% We use internal \LaTeX\ command "\@eqnum" for generating equation number
% (define it of course only in \LaTeX).
%    \begin{macrocode}
%<*latex>
\newcommand\eqn[1][\@empty]
  {\refstepcounter{equation}\eqno\hbox{\@eqnnum}%
   \ifx\@empty#1\else\label{#1}\fi}
%</latex>
%</mathabbr>
%    \end{macrocode}
% \end{macro}
%
% \subsection{Initializations}
% Set up default options
%    \begin{macrocode}
%<*latex>
%<valform>\ExecuteOptions{czechf,medsp}
%<newvec>\ExecuteOptions{yetivec}
%    \end{macrocode}
% write out warnings
%    \begin{macrocode}
%<mathabbr>\PackageWarning{MathAbbr}{Changing meaning of \noexpand\(,
%<mathabbr>  \noexpand\), \noexpand\[ and \noexpand\]}
%<newvec>\PackageWarning{NewVec}{Changing meaning of \noexpand\vec}
%    \end{macrocode}
% and process options.
%    \begin{macrocode}
%<moremath|valform|newvec>\ProcessOptions
%    \end{macrocode}
% \textsf{moremath} loads \vf, \nv{} and \ma{} packages
%    \begin{macrocode}
%<moremath>\RequirePackage{valform}
%<moremath>\RequirePackage{newvec}
%<moremath>\RequirePackage{mathabbr}
%    \end{macrocode}
% Load \es{} package in \ma{} if "\@ptsize" is nonzero (changed 2000/05/16,
% it was loaded by \mm, but use of \mm{} is deprecated now).
% I wonder why it isn't done automatically by \LaTeX.
%    \begin{macrocode}
%<mathabbr>\ifnum0<\@ptsize\RequirePackage{exscale}\fi
%</latex>
%    \end{macrocode}
%
% Set up some reasonable defaults in Plain too.
%    \begin{macrocode}
%<*plain>
%<valform>\ifx\mm@mathabbr\undefined
%<valform>  \def\timesop{\mathbin.}%
%<valform>\else
%<valform>  \let\timesop\dop
%<valform>\fi
%<valform>\betweenunitskip4mu\relax
%    \end{macrocode}
%
% Restore @~"\catcode"s in Plain
%    \begin{macrocode}
\catcode`\@=\atcatcode
\let\atcatcode\undefined
%</plain>
%</package>
%    \end{macrocode}
%
% \subsection{Parameter file for \texttt{cmvec10}}
% \index{cmvec10=\texttt{cmvec10} font|main}
% The parameter file for Slanted Sans Serif Bold Extended Computer Modern font
% was made up simply by combining parameters for \texttt{cmssbx10} and
% \texttt{cmssi10},\footnote
%   {With two changes---\texttt{math$\_$fitting} and \texttt{variant$\_$g}
%    was set to true.}
% so the result is not very excellent especially on lower resolutions.
% I chose this approach only because I needed the font fast
% and didn't find it on CTAN.
% I named it \texttt{cmvec} instead of systematic name \texttt{cmssbi} to avoid
% inteference with somebody else's (I hope better) Slanted Sans Serif Bold
% Extended Computer Modern font, which I still seek for---if you know about
% some, please send me some reference.
%    \begin{macrocode}
%<*cmvec>
%<*tenpoint>
% Computer Modern Slanted Sans Serif Bold Extended 10pt
% with math_fitting and variant_g
% Made up by Yeti as temporary solution in his font need
if unknown cmbase: input cmbase fi

font_identifier:="CMVEC"; font_size 10pt#;

u#:=22/36pt#;      % unit width
width_adj#:=22/36pt#;    % width adjustment for certain characters
serif_fit#:=-9/36pt#;    % extra sidebar near lowercase serifs
cap_serif_fit#:=-11/36pt#;  % extra sidebar near uppercase serifs
letter_fit#:=0pt#;    % extra space added to all sidebars

body_height#:=270/36pt#;  % height of tallest characters
asc_height#:=250/36pt#;    % height of lowercase ascenders
cap_height#:=250/36pt#;    % height of caps
fig_height#:=250/36pt#;    % height of numerals
x_height#:=165/36pt#;    % height of lowercase without ascenders
math_axis#:=90/36pt#;    % axis of symmetry for math symbols
bar_height#:=90/36pt#;    % height of crossbar in lowercase e
comma_depth#:=45/36pt#;    % depth of comma below baseline
desc_depth#:=70/36pt#;    % depth of lowercase descenders

crisp#:=26/36pt#;    % diameter of serif corners
tiny#:=26/36pt#;    % diameter of rounded corners
fine#:=9/36pt#;      % diameter of sharply rounded corners
thin_join#:=9/36pt#;    % width of extrafine details
hair#:=49/36pt#;    % lowercase hairline breadth
stem#:=49/36pt#;    % lowercase stem breadth
curve#:=49/36pt#;    % lowercase curve breadth
ess#:=43/36pt#;      % breadth in middle of lowercase s
flare#:=40/36pt#;    % diameter of bulbs or breadth of terminals
dot_size#:=47/36pt#;    % diameter of dots
cap_hair#:=49/36pt#;    % uppercase hairline breadth
cap_stem#:=53/36pt#;    % uppercase stem breadth
cap_curve#:=53/36pt#;    % uppercase curve breadth
cap_ess#:=51/36pt#;    % breadth in middle of uppercase s
rule_thickness#:=30/36pt#;  % thickness of lines in math symbols

dish#:=0pt#;      % amount erased at top or bottom of serifs
bracket#:=0pt#;      % vertical distance from serif base to tangent
jut#:=0pt#;      % protrusion of lowercase serifs
cap_jut#:=0pt#;      % protrusion of uppercase serifs
beak_jut#:=0pt#;    % horizontal protrusion of beak serifs
beak#:=1.5/36pt#;    % vertical protrusion of beak serifs
vair#:=26/36pt#;    % vertical diameter of hairlines
notch_cut#:=49/36pt#;    % maximum breadth above or below notches
bar#:=26/36pt#;      % lowercase bar thickness
slab#:=36/36pt#;    % serif and arm thickness
cap_bar#:=34/36pt#;    % uppercase bar thickness
cap_band#:=31/36pt#;    % uppercase thickness above/below lobes
cap_notch_cut#:=45/36pt#;  % max breadth above/below uppercase notches
serif_drop#:=2/36pt#;    % vertical drop of sloped serifs
stem_corr#:=1/36pt#;    % for small refinements of stem breadth
vair_corr#:=2/36pt#;    % for small refinements of hairline height
apex_corr#:=18/36pt#;    % extra width at diagonal junctions

o#:=8/36pt#;      % amount of overshoot for curves
apex_o#:=0pt#;      % amount of overshoot for diagonal junctions

slant:=sind 12/cosd 12;    % tilt ratio $(\Delta x/\Delta y)$
fudge:=.88;      % factor applied to weights of heavy characters
math_spread:=.5;    % extra openness of math symbols
superness:=3/4;      % parameter for superellipses
superpull:=1/18;    % extra openness inside bowls
beak_darkness:=0;    % fraction of triangle inside beak serifs
square_dots:=true;    % should dots be square?
hefty:=true;      % should we try hard not to be overweight?
serifs:=false;      % should serifs and bulbs be attached?
monospace:=false;    % should all characters have the same width?
variant_g:=true;    % should an italic-style g be used?
low_asterisk:=false;    % should the asterisk be centered at the axis?
math_fitting:=true;    % should math-mode spacing be used?

generate roman      % switch to the driver file
%</tenpoint>
%    \end{macrocode}
%
% \subsection{Font definition file for \texttt{cmvec}}
% \index{cmvec.fd=\texttt{cmvec.fd}|main}
% All sizes are generated from \texttt{cmvec10}. That's bad, but I didn't make
% any other size yet.
%    \begin{macrocode}
%<*fd>
\ProvidesFile{ot1cmvec.fd}[1999/06/23 v1.00 cmvec font definition]
\DeclareFontShape{OT1}{cmss}{bx}{sl}
  { <5><6><7><8><9><10>cmvec10
    <10.95><12><14.40><17.28>cmvec10
  }{}
%</fd>
%</cmvec>
%    \end{macrocode}
%
% \PrintChanges
% \Finale
\endinput
